<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[那么问题来了：Git 和 Github是什么鬼 ？？！]]></title>
      <url>%2F2017%2F02%2F17%2FGithub%2F</url>
      <content type="text"><![CDATA[什么是Git？首先，Git是一种版本管理系统/软件(百度百科)，是目前全世界最流行的分布式版本控制系统（好牛逼啊）。版本管理有 集中型 和 分散型 SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就呵呵了。 Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。 Git 创始人：Linux的创始人 Linus Torvalds 开发时间 ：公元2005 在Windows下安装Git后，在应用程序栏可以看到 Git BashGit Bash是作为一个应用程序添加进系统的，当启动Git Bash后，git命令就只能在 Git Bash 中使用，在 Windows 附属的命令提示符中则无法运行。 安装完成后，还需要最后一步设置，双击进入 Git Bash 在命令行输入如下： 什么是Github？Github 是为开发者提供Git 仓库的托管服务网站（也有客户端）。Github 的出现为开源世界带来了社会化编程的概念。这一概念影响了全世界众多的程序员，Github这一服务创造了社会化编程的概念。随着Github的出现，软件开发者们才真正意义上拥有了源代码。世界上任何人都可以比以前更加容易滴获取源代码，将其自由的更改并加以公开。 为什么需要社会化编程当今的ＩＴ业界已经没有了终身雇佣制，人才流动性日益增大。可以说，每个月我们都能在一些著名开发者博客中看到这种现象：月末刚发布“辞职了”的消息，月初就又“入职了”。 那么，如果您是程序员的面试官，两者这间您会选择哪一位呢？？ 能查看到以前所写代码的程序员 or 无法查看的程序员 精通最新软件的程序员 or 不精通的程序员 对语言或软件差异带来的不同文化有所理解的程序员 or 不理解的程序员 为了不成为后一种程序员，理解社会化编程和 Github 至关重要 Git ShellGit Shell是Github 客户端自带的shell 脚步命令器。使用Git Shell可以将本地的项目发布、部署到网上的Github。下图就是我在Git Shell启动本地 Hexo 服务。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Github Pages + Hexo搭建个人博客全攻略N0.2]]></title>
      <url>%2F2017%2F02%2F15%2FPages-Hexo-blog2%2F</url>
      <content type="text"><![CDATA[前言 本次操作是本地配置的重中之重，请各位一定要仔细，其中涉及到 Git客户端的安装 配置生成SSH Key（一种传输代码的方法，速度快安全。） 添加到Github 安装Git客户端git是版本管理的未来，Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。如果推荐这本Git中文教程。 要使用Git，需要安装它的客户端，推荐在Linux下使用Git，会比较方便。下载地址在这里：http://code.google.com/p/msysgit/downloads/lis 。其他系统的安装也可以参考官方的安装教程。 安装完成后，还需要最后一步设置，在命令行输入： $ git config --global user.name &quot;Your Name&quot; $ git config --global user.email &quot;email@example.com&quot; 配置SSH keys和使用Github首先，什么是SSH?? SSH的英文全称是Secure SHell。通过使用SSH，你可以把所有传输的数据进行加密，这样“中间人”这种攻击方式就不可能实现了，而且也能够防止DNS和IP欺骗。还有一个额外的好处就是传输的数据是经过压缩的，所以可以加快传输的速度。SSH有很多功能，它既可以代替telnet，又可以为ftp、pop、甚至ppp提供一个安全的“通道”。 当我们需要将本地的代码传输到Github上时，SSH keys就起到了一个安全传输的功能。（哈哈！是不是很神奇？！） 检查SSH keys的设置首先我们需要检查你电脑上现有的ssh key： $ cd ~/.ssh 如果显示“No such file or directory”，跳到第三步，否则继续。 备份和移除原来的ssh key设置因为已经存在key文件，所以需要备份旧的数据并删除： ls config id_rsa id_rsa.pub known_hosts mkdir key_backup cp id_rsa* key_backup rm id_rsa*` 生成新的SSH Key输入下面的代码，就可以生成新的key文件，我们只需要默认设置就好，所以当需要输入文件名的时候，回车就好。 $ ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot; Generating public/private rsa key pair. Enter file in which to save the key (/Users/ your_user_directory/.ssh/id_rsa):&lt;回车就好&gt; 然后系统会要你输入加密串（Passphrase）： Enter passphrase (empty for no passphrase):&lt;输入加密串&gt; Enter same passphrase again:&lt;再次输入加密串&gt; 最后看到ssh key success，就成功设置ssh key了. 添加SSH Key到GitHub在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。 用文本编辑工具打开id_rsa.pub文件，仔细查看上面保存的文件路径。如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。 在GitHub的主页上点击设置按钮： github account setting，进入设置后：点击SSH配置 选择SSH Keys项，把复制的内容粘贴进去，然后点击Add Key按钮即可： PS：如果需要配置多个GitHub账号，可以参看这个多个github帐号的SSH key切换，不过需要提醒一下的是，如果你只是通过这篇文章中所述配置了Host，那么你多个账号下面的提交用户会是一个人，所以需要通过命令git config --global --unset user.email删除用户账户设置，在每一个repo下面使用git config --local user.email &#39;你的github邮箱@mail.com&#39;命令单独设置用户账户信息 测试一下可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改： $ ssh -T git@github.com 如果是下面的反应： The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established. RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48. Are you sure you want to continue connecting (yes/no)? 不要紧张，输入yes就好，然后会看到： Hi &lt;em&gt;username&lt;/em&gt;! You&apos;ve successfully authenticated, but GitHub does not provide shell access. 设置你的账号信息现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。 Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。 $ git config --global user.name &quot;你的名字&quot; $ git config --global user.email &quot;your_email@youremail.com&quot; 好了，你已经可以成功连接GitHub了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Github Pages + Hexo搭建个人博客全攻略N0.1]]></title>
      <url>%2F2017%2F02%2F15%2FPages-Hexo-blog1%2F</url>
      <content type="text"><![CDATA[前言Github Pages 是 github 公司提供的免费的静态网站托管服务，用起来方便而且功能强大，不仅没有空间限制，还可以绑定自己的域名。在 Github Pages 首页上可以看到很多用 Github Pages 托管的网站，很漂亮。另外很多非常著名的公司和项目也都用这种方式来搭建网站，如微软和 twitter 的网站，还有 谷歌的 Material Design 图标 网站。 Github Pages有以下几个优点： 轻量级的博客系统，没有麻烦的配置 使用标记语言，比如Markdown 无需自己搭建服务器 根据Github的限制，对应的每个站有300MB空间 可以绑定自己的域名 当然他也有缺点： 使用Hexo，相当于静态页发布，适合博客，文档介绍等。 基于Git，很多东西需要动手，不像Wordpress有强大的后台 购买域名为什么购买域名要放在最先呢？！因为很多人搭载博客源于一时性起，容易半途而废，所以花钱买个域名起码能让自己有一种动力去坚持！！！ 提供域名购买的网站有很多，例如国外的Godaddy、国内的万网(被马云爸爸收购了) 快速开始账号注册用Github Page搭载博客，首先你得有个Gitbub账号（什么是Github??GitHub 是一个面向开源及私有软件项目的托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub。GitHub 于 2008 年 4 月 10 日正式上线，除了 Git 代码仓库托管及基本的 Web 管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑器、协作图谱（报表）、代码片段分享（Gist）等功能。目前，其注册用户已经超过350万，托管版本数量也是非常之多，其中不乏知名开源项目 Ruby on Rails、jQuery 等。） 以上源自 Baidu百科 登录Github网站,填写账号、邮箱、密码，点击注册。注册完成后，选择Free免费账号完成设置。 创建仓库点击New Repository,并且仓库名格式必须为 username.github.io,以后我们就可以使用http://username.github.io/这个域名来访问我们的项目。 在项目添加一个index.html文件，就可以生成为主页了。建一个项目网站的详细步骤在 Github Page创建网站 页面上 绑定域名有一个功能其实很重要，就是绑定自己的域名。想想如果有天 github 网站被依法和谐了，那怎么办？如果一开始就是用自己的域名，那就简单了，直接换一台服务器就好了。 绑定域名的具体的操作步骤在这里 。 DNS 设置的方式并不唯一，但也是大同小异，下面演示一下我自己的操作过程。我的 johnylin.com 这个域名是在 万网（阿里云） 上买的。 首先在 万网上进入&lt;我的域名服务&gt;，在&lt;域名列表&gt;中找到&lt;解析&gt; 添加 4个 A Record 指向 192.30.252.153 和 192.30.252.154 也就是设置成下图这样也就是添加了四个 A 记录，这样后面用 &quot;http://johnylin.com&quot; 或者 &quot;http://www.johnylin.com&quot; 就都可以指向 github pages 的服务器了。然后在你的gh-pages分支的根目录中创建一个CNAME文件 johnylin.com 这样操作结束，当然还要稍微等几个小时给 DNS 扩散。晚上做完上面的操作，第二天就可以登录网站了。 域名扫盲说实话，虽然明白什么是域名以及域名解析的原理，但是在实际的互联网环境中，域名的问题其实比理论上说的要复杂些。这里对一些概念稍作整理。 A（Address）记录是用来指定主机名（或域名）对应的IP地址记录。用户可以将该域名下的网站服务器指向到自己的web server上。同时也可以设置您域名的二级域名。 CNAME也被称为规范名字。这种记录允许您将多个名字映射到同一台计算机。 通常用于同时提供WWW和MAIL服务的计算机。例如，有一台计算机名为“host.mydomain.com”（A记录）。 它同时提供WWW和MAIL服务，为了便于用户访问服务。可以为该计算机设置两个别名（CNAME）：WWW和MAIL。 这两个别名的全称就是“www.mydomain.com”和“mail.mydomain.com”。实际上他们都指向“host.mydomain.com”。 同样的方法可以用于当您拥有多个域名需要指向同一服务器IP，此时您就可以将一个域名做A记录指向服务器IP然后将其他的域名做别名到之前做A记录的域名上，那么当您的服务器IP地址变更时您就可以不必麻烦的一个一个域名更改指向了 只需要更改做A记录的那个域名其他做别名的那些域名的指向也将自动更改到新的IP地址上了。 TTLTTL值全称是“生存时间（Time To Live)”，简单的说它表示DNS记录在DNS服务器上缓存时间。要理解TTL值，请先看下面的一个例子：假设，有这样一个域名myhost.cnMonkey.com（其实，这就是一条DNS记录，通常表示在abc.com域中有一台名为myhost的主机）对应IP地 址为1.1.1.1，它的TTL为10分钟。这个域名或称这条记录存储在一台名为dns.cnMonkey.com的DNS服务器上。现在有一个用户键入一下地址（又称URL）：http://myhost.cnMonkey.com 这时会发生什么呢？该 访问者指定的DNS服务器（或是他的ISP,互联网服务商, 动态分配给他的)8.8.8.8就会试图为他解释myhost.cnMonkey.com，当然8.8.8.8这台DNS服务器由于没有包含 myhost.cnMonkey.com这条信息，因此无法立即解析，但是通过全球DNS的递归查询后，最终定位到dns.cnMonkey.com这台DNS服务器， dns.cnMonkey.com这台DNS服务器将myhost.cnMonkey.com对应的IP地址1.1.1.1告诉8.8.8.8这台DNS服务器，然有再由 8.8.8.8告诉用户结果。8.8.8.8为了以后加快对myhost.cnMonkey.com这条记录的解析，就将刚才的1.1.1.1结果保留一段时间，这 就是TTL时间，在这段时间内如果用户又有对myhost.cnMonkey.com这条记录的解析请求，它就直接告诉用户1.1.1.1，当TTL到期则又会重复 上面的过程。 域名分级子域名是个相对的概念，是相对父域名来说的。域名有很多级，中间用点分开。例如中国国家顶级域名CN，所有以 CN 结尾的域名便都是它的子域。例如：www.zzy.cn 便是 zzy.cn 的子域，而 zzy.cn 是 cn 的子域。 “二级域名”：目前有很多用户认为“二级域名”是自己所注册域名的下一级域名，实际上这里所谓的“二级域名”并非真正的“二级”，而应该称为“次级”(相对次级) 例如您注册的域名是abc.cn来说：CN为顶级域，abc.cn为二级域，www.abc.cn、mail.abc.cn、help.zzy.cn为三级域。还有一些特殊的二级域被用来作顶级域使用，例如：com.cn、net.cn、org.cn、gov.cn（包括地区域名bj.cn、fj.cn等）。那么此时用户所注册的就应该是三级域了，例如114.com.cn。（备注：www.gov.cn实际上是以gov.cn为后缀的www域名，就是说如果您在域名Whois信息查询中输入gov.cn是查询不到注册信息的因为gov.cn是作为顶级域来使用的域名后缀，真正开放注册的是www.gov.cn）。然而当前有很多用户还是习惯地将可以允许用户注册的域名称为顶级域名，而所注册域名的下一级域名称为“二级域名”，其实从严格意义上来讲这是不对的，所以我们前面会说“子域名”、“二级域名”是相对的概念，准确的应该称为“次级域名”。 《域名扫盲》引用自 EZLippi]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[58个国内外优质网站]]></title>
      <url>%2F2017%2F02%2F08%2F2017-02-08-58%E4%B8%AA%E4%BC%98%E8%B4%A8%E7%BD%91%E7%AB%99%2F</url>
      <content type="text"><![CDATA[]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[About Me]]></title>
      <url>%2F2016%2F06%2F11%2Fabout%2F</url>
      <content type="text"><![CDATA[Personal introduction Mr.林锐忠 Java 开发、前端开发、微信开发爱好者。 潮汕人（爱拼才会赢） 现居广州，就读于广东技术师范学院 虽然专业是计算机师范，但是不想当成功的IT工程师不是好的老师。 别人眼里的优雅、诗意在我看来都是TM什么玩意？！ Find me here… 微博联系我 知乎联系我 github联系我 欢迎调戏微信: dearpear_lin邮箱: ruijohn2013@163.com About this site个人经验浅谈、侃侃技术、分享交流、记录生活。]]></content>
    </entry>

    
  
  
</search>
